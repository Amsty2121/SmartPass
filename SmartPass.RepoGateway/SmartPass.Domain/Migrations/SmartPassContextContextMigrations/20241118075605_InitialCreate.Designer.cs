// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartPass.Repository.Contexts;

#nullable disable

namespace SmartPass.Repository.Migrations.SmartPassContextContextMigrations
{
    [DbContext(typeof(SmartPassContext))]
    [Migration("20241118075605_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartPass.Repository.Models.Entities.AccessCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccessLevelId")
                        .HasColumnType("uuid");

                    b.Property<int>("CardState")
                        .HasColumnType("integer");

                    b.Property<int>("CardType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUsingUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PassIndex")
                        .HasColumnType("integer");

                    b.Property<string>("PassKeys")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<DateTime?>("UpdateUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccessLevelId");

                    b.HasIndex("UserId");

                    b.ToTable("AccessCards");
                });

            modelBuilder.Entity("SmartPass.Repository.Models.Entities.AccessLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForSpecificZone")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdateUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AccessLevels");
                });

            modelBuilder.Entity("SmartPass.Repository.Models.Entities.CardReader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUsingUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdateUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ZoneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("CardReaders");
                });

            modelBuilder.Entity("SmartPass.Repository.Models.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccessCardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CardReaderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("SessionStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccessCardId");

                    b.HasIndex("CardReaderId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("SmartPass.Repository.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessCardsRowsStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(44)
                        .HasColumnType("character varying(44)");

                    b.Property<DateTime?>("UpdateUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartPass.Repository.Models.Entities.UserAuthData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserAuthDatas");
                });

            modelBuilder.Entity("SmartPass.Repository.Models.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdateUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("SmartPass.Repository.Models.Entities.Zone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccessLevelId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdateUtcDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccessLevelId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("UserUserRole", b =>
                {
                    b.Property<Guid>("UserRolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("UserRolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserUserRole");
                });

            modelBuilder.Entity("SmartPass.Repository.Models.Entities.AccessCard", b =>
                {
                    b.HasOne("SmartPass.Repository.Models.Entities.AccessLevel", "AccessLevel")
                        .WithMany("AccessCards")
                        .HasForeignKey("AccessLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartPass.Repository.Models.Entities.User", "User")
                        .WithMany("AccessCards")
                        .HasForeignKey("UserId");

                    b.Navigation("AccessLevel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartPass.Repository.Models.Entities.CardReader", b =>
                {
                    b.HasOne("SmartPass.Repository.Models.Entities.Zone", "Zone")
                        .WithMany("CardReaders")
                        .HasForeignKey("ZoneId");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("SmartPass.Repository.Models.Entities.Session", b =>
                {
                    b.HasOne("SmartPass.Repository.Models.Entities.AccessCard", "AccessCard")
                        .WithMany("Sessions")
                        .HasForeignKey("AccessCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartPass.Repository.Models.Entities.CardReader", "CardReader")
                        .WithMany("Sessions")
                        .HasForeignKey("CardReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessCard");

                    b.Navigation("CardReader");
                });

            modelBuilder.Entity("SmartPass.Repository.Models.Entities.UserAuthData", b =>
                {
                    b.HasOne("SmartPass.Repository.Models.Entities.User", "User")
                        .WithOne("UserAuthData")
                        .HasForeignKey("SmartPass.Repository.Models.Entities.UserAuthData", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartPass.Repository.Models.Entities.Zone", b =>
                {
                    b.HasOne("SmartPass.Repository.Models.Entities.AccessLevel", "AccessLevel")
                        .WithMany("Zones")
                        .HasForeignKey("AccessLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessLevel");
                });

            modelBuilder.Entity("UserUserRole", b =>
                {
                    b.HasOne("SmartPass.Repository.Models.Entities.UserRole", null)
                        .WithMany()
                        .HasForeignKey("UserRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartPass.Repository.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartPass.Repository.Models.Entities.AccessCard", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("SmartPass.Repository.Models.Entities.AccessLevel", b =>
                {
                    b.Navigation("AccessCards");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("SmartPass.Repository.Models.Entities.CardReader", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("SmartPass.Repository.Models.Entities.User", b =>
                {
                    b.Navigation("AccessCards");

                    b.Navigation("UserAuthData")
                        .IsRequired();
                });

            modelBuilder.Entity("SmartPass.Repository.Models.Entities.Zone", b =>
                {
                    b.Navigation("CardReaders");
                });
#pragma warning restore 612, 618
        }
    }
}
